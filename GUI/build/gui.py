# This GUI was designed by Tanzim Ikram Sheikh
# Follow me on GitHub: https://github.com/tanzim-ikram
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

# For Serial Data
from serialdata import SerialComm

# For Displaying Time:
from datetime import datetime
import pytz

# For Graphs
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

# For Path Finding
from pathlib import Path

# For GUI
from tkinter import Tk, Canvas, PhotoImage

GRAPH_FACE_COLOR = "#1D1D1D"

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"G:\AERD\Projects\Flight Computer\GUI\build\assets\frame0")


# ---------------------------------Time Function Starts ---------------------------------
def update_time():
    # Get the current time in UTC
    current_utc_time = datetime.now(pytz.utc)

    # Convert UTC time to Bangladesh time (UTC+6)
    bd_timezone = pytz.timezone("Asia/Dhaka")
    current_bd_time = current_utc_time.astimezone(bd_timezone)

    # Format the time as a string
    time_str = current_bd_time.strftime('%H:%M:%S')

    # Update the text on the canvas
    canvas.itemconfig(time_text, text=time_str + " UTC+6")

    # Call update_time function after 1000ms (1 second)
    window.after(1000, update_time)


# --------------------------------- Time Function Ends ---------------------------------

# ---------------------------------- Graph Start ----------------------------------
# Function to update data
def update_data():
    global altitude, pressure, time_data, velocity

    # Assuming SerialComm class updates these variables, replace with actual data retrieval logic
    altitude.append(float(serial_comm.sensor_values[2].get()))
    pressure.append(float(serial_comm.sensor_values[3].get()))
    velocity.append(float(serial_comm.sensor_values[4].get()))
    time_data.append(time_data[-1] + 1)

    # Limit data points to maintain a reasonable number (adjust as needed)
    data_limit = 50
    if len(altitude) > data_limit:
        del altitude[0]
        del pressure[0]
        del velocity[0]
        del time_data[0]


# Initialize data
altitude = [0]
pressure = [1000]
velocity = [0]
time_data = [0]

# Create a figure and axis for Time vs Altitude graph
fig_time_altitude = Figure(figsize=(3.8, 2.3), facecolor=GRAPH_FACE_COLOR)
ax_time_altitude = fig_time_altitude.add_subplot()
ax_time_altitude.set_facecolor(GRAPH_FACE_COLOR)
ax_time_altitude.plot(time_data, altitude, color="deepskyblue")
ax_time_altitude.fill_between(time_data, altitude, alpha=0.5, color="deepskyblue")
ax_time_altitude.tick_params(labelsize=7, colors="white")
fig_time_altitude.autofmt_xdate()
ax_time_altitude.grid(visible=True)

# Create a figure and axis for Time vs Velocity graph
fig_time_velocity = Figure(figsize=(3.8, 2.3), facecolor=GRAPH_FACE_COLOR)
ax_time_velocity = fig_time_velocity.add_subplot()
ax_time_velocity.set_facecolor(GRAPH_FACE_COLOR)
ax_time_velocity.plot(time_data, velocity, color="orange")
ax_time_velocity.fill_between(time_data, velocity, alpha=0.5, color="orange")
ax_time_velocity.tick_params(labelsize=7, colors="white")
fig_time_velocity.autofmt_xdate()
ax_time_velocity.grid(visible=True)

# Create a figure and axis for Altitude vs Pressure graph
fig_altitude_pressure = Figure(figsize=(3.8, 2.3), facecolor=GRAPH_FACE_COLOR)
ax_altitude_pressure = fig_altitude_pressure.add_subplot()
ax_altitude_pressure.set_facecolor(GRAPH_FACE_COLOR)
ax_altitude_pressure.plot(altitude, pressure, color="lightgreen")
ax_altitude_pressure.fill_between(altitude, pressure, alpha=0.5, color="lightgreen")
ax_altitude_pressure.tick_params(labelsize=7, colors="white")
fig_altitude_pressure.autofmt_xdate()
ax_altitude_pressure.grid(visible=True)


# Update data and plot every second
def animate():
    update_data()

    # Update Time vs Altitude graph
    ax_time_altitude.clear()
    ax_time_altitude.plot(time_data, altitude, color="deepskyblue")
    ax_time_altitude.fill_between(time_data, altitude, alpha=0.5, color="deepskyblue")
    ax_time_altitude.tick_params(labelsize=7, colors="white")
    ax_time_altitude.grid(visible=True)
    canvas_time_altitude.draw()

    # Update Time vs Velocity graph
    ax_time_velocity.clear()
    ax_time_velocity.plot(time_data, velocity, color="orange")
    ax_time_velocity.fill_between(time_data, velocity, alpha=0.5, color="orange")
    ax_time_velocity.tick_params(labelsize=7, colors="white")
    ax_time_velocity.grid(visible=True)
    canvas_time_velocity.draw()

    # Update Altitude vs Pressure graph
    ax_altitude_pressure.clear()
    ax_altitude_pressure.plot(altitude, pressure, color="lightgreen")
    ax_altitude_pressure.fill_between(altitude, pressure, alpha=0.5, color="lightgreen")
    ax_altitude_pressure.tick_params(labelsize=7, colors="white")
    ax_altitude_pressure.grid(visible=True)
    canvas_altitude_pressure.draw()

    # Call animate function again after 1000 ms
    window.after(1000, animate)


# ----------------------------------- Graph End -----------------------------------

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()
window.title("AERD Flight Computer")
window.geometry("1280x720")
window.configure(bg="#121212")

canvas = Canvas(
    window,
    bg="#121212",
    height=720,
    width=1280,
    bd=0,
    highlightthickness=0,
    relief="ridge"
)

canvas.place(x=0, y=0)
canvas.create_rectangle(
    19.0,
    952.0,
    334.0,
    1023.0,
    fill="#1D1D1D",
    outline="")

canvas.create_rectangle(
    12.0,
    11.0,
    1266.0,
    131.0,
    fill="#245484",
    outline="")

canvas.create_rectangle(
    15.0,
    13.0,
    1264.0,
    128.0,
    fill="#1D1D1D",
    outline="")

canvas.create_text(
    550.0,
    39.0,
    anchor="nw",
    text="Flight Computer",
    fill="#FFFFFF",
    font=("Inter Bold", 55 * -1)
)

image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    430.0,
    65.0,
    image=image_image_1
)

canvas.create_rectangle(
    12.0,
    408.0,
    422.0,
    708.0,
    fill="#245484",
    outline="")

canvas.create_rectangle(
    14.0,
    410.0,
    419.0,
    705.0,
    fill="#1D1D1D",
    outline="")

canvas.create_text(
    151.0,
    419.0,
    anchor="nw",
    text="Time vs Altitude",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 16 * -1)
)

canvas.create_rectangle(
    434.0,
    408.0,
    844.0,
    708.0,
    fill="#245484",
    outline="")

canvas.create_rectangle(
    436.0,
    410.0,
    841.0,
    705.0,
    fill="#1D1D1D",
    outline="")

canvas.create_text(
    572.0,
    419.0,
    anchor="nw",
    text="Time vs Velocity",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 16 * -1)
)

canvas.create_rectangle(
    857.0,
    408.0,
    1267.0,
    708.0,
    fill="#245484",
    outline="")

canvas.create_rectangle(
    860.0,
    410.0,
    1265.0,
    705.0,
    fill="#1D1D1D",
    outline="")

canvas.create_text(
    977.0,
    419.0,
    anchor="nw",
    text="Altitude vs Pressure",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 16 * -1)
)

canvas.create_rectangle(
    12.0,
    144.0,
    422.0,
    264.0,
    fill="#245484",
    outline="")

canvas.create_rectangle(
    434.0,
    143.0,
    844.0,
    263.0,
    fill="#245484",
    outline="")

canvas.create_rectangle(
    856.0,
    142.0,
    1266.0,
    262.0,
    fill="#245484",
    outline="")

canvas.create_rectangle(
    12.0,
    275.0,
    422.0,
    395.0,
    fill="#245484",
    outline="")

canvas.create_rectangle(
    434.0,
    274.0,
    844.0,
    394.0,
    fill="#245484",
    outline="")

canvas.create_rectangle(
    856.0,
    273.0,
    1266.0,
    393.0,
    fill="#245484",
    outline="")

canvas.create_rectangle(
    14.0,
    277.0,
    419.0,
    392.0,
    fill="#1D1D1D",
    outline="")

canvas.create_rectangle(
    436.0,
    276.0,
    841.0,
    391.0,
    fill="#1D1D1D",
    outline="")

canvas.create_rectangle(
    859.0,
    275.0,
    1264.0,
    390.0,
    fill="#1D1D1D",
    outline="")

canvas.create_rectangle(
    14.0,
    146.0,
    419.0,
    261.0,
    fill="#1D1D1D",
    outline="")

canvas.create_rectangle(
    436.0,
    145.0,
    841.0,
    260.0,
    fill="#1D1D1D",
    outline="")

canvas.create_rectangle(
    859.0,
    144.0,
    1264.0,
    259.0,
    fill="#1D1D1D",
    outline="")

time_text = canvas.create_text(
    100.0,
    200.0,
    anchor="nw",
    text="",
    fill="#76C7FE",
    font=("Inter ExtraBold", 32 * -1)
)

# Pressure Value
pressure_text = canvas.create_text(
    538.0,
    190.0,
    anchor="nw",
    text="1012.8 hPa",
    fill="#76C7FE",
    font=("Inter ExtraBold", 32 * -1)
)

# Latitude Value
latitude_text = canvas.create_text(
    994.0,
    188.0,
    anchor="nw",
    text="23.810331",
    fill="#76C7FE",
    font=("Inter ExtraBold", 32 * -1)
)

# Altitude Value
altitude_text = canvas.create_text(
    155.0,
    322.0,
    anchor="nw",
    text="0.5 km",
    fill="#76C7FE",
    font=("Inter ExtraBold", 32 * -1)
)

# Velocity Value
velocity_text = canvas.create_text(
    576.0,
    321.0,
    anchor="nw",
    text="5 km/h",
    fill="#76C7FE",
    font=("Inter ExtraBold", 32 * -1)
)

# Longitude Value
longitude_text = canvas.create_text(
    992.0,
    320.0,
    anchor="nw",
    text="90.412521",
    fill="#76C7FE",
    font=("Inter Black", 32 * -1)
)

canvas.create_text(
    196.0,
    155.0,
    anchor="nw",
    text="Time",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 16 * -1)
)

canvas.create_text(
    603.0,
    154.0,
    anchor="nw",
    text="Pressure",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 16 * -1)
)

canvas.create_text(
    1027.0,
    153.0,
    anchor="nw",
    text="Latitude",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 16 * -1)
)

canvas.create_text(
    184.0,
    287.0,
    anchor="nw",
    text="Altitude",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 16 * -1)
)

canvas.create_text(
    605.0,
    286.0,
    anchor="nw",
    text="Velocity",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 16 * -1)
)

canvas.create_text(
    1020.0,
    285.0,
    anchor="nw",
    text="Longitude",
    fill="#FFFFFF",
    font=("Poppins SemiBold", 16 * -1)
)


# ---------------------------- Canvases for Each Graph Starts ----------------------------

# Time vs Altitude Graph
# Embed Time vs Altitude Graph in canvas
canvas_time_altitude = FigureCanvasTkAgg(fig_time_altitude, master=canvas)
canvas_time_altitude.draw()
canvas_time_altitude.get_tk_widget().place(x=28, y=445)

# Time vs Velocity Graph
# Embed Time vs Velocity Graph in canvas
canvas_time_velocity = FigureCanvasTkAgg(fig_time_velocity, master=canvas)
canvas_time_velocity.draw()
canvas_time_velocity.get_tk_widget().place(x=450, y=445)

# Altitude vs Pressure Graph
# Embed Altitude vs Pressure graph in canvas
canvas_altitude_pressure = FigureCanvasTkAgg(fig_altitude_pressure, master=canvas)
canvas_altitude_pressure.draw()
canvas_altitude_pressure.get_tk_widget().place(x=875, y=445)


# ----------------------------- Canvases for Each Graph Ends -----------------------------

# Create an instance of the SerialComm class to manage serial communication
serial_comm = SerialComm(window)


# -------------------------- Update GUI with Data from Serial Starts --------------------------
def update_gui_with_serial_data():
    canvas.itemconfig(latitude_text, text=serial_comm.sensor_values[0].get())
    canvas.itemconfig(longitude_text, text=serial_comm.sensor_values[1].get())
    canvas.itemconfig(altitude_text, text=serial_comm.sensor_values[2].get() + " km")
    canvas.itemconfig(pressure_text, text=serial_comm.sensor_values[3].get() + " hPa")
    canvas.itemconfig(velocity_text, text=serial_comm.sensor_values[4].get() + " km/h")

    window.after(100, update_gui_with_serial_data)  # Update GUI every 100ms


# --------------------------- Update GUI with Data from Serial Ends ---------------------------


update_time()
update_gui_with_serial_data()
animate()

window.resizable(False, False)
window.mainloop()
